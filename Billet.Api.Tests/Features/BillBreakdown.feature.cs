// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Billet.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class BillBreakdownFeature : Xunit.IUseFixture<BillBreakdownFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "BillBreakdown.feature"
#line hidden
        
        public BillBreakdownFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Bill Breakdown", "In order to see the full state of my bill\nAs a sky customer\nI want to see a break" +
                    "down of the components of my bill", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(BillBreakdownFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Bill Breakdown")]
        [Xunit.TraitAttribute("Description", "Package breakdown")]
        public virtual void PackageBreakdown()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Package breakdown", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I have an account \'123\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.When("I request my package breakdown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Cost",
                        "Type"});
            table1.AddRow(new string[] {
                        "Variety with Movies HD",
                        "£50.00",
                        "TV"});
            table1.AddRow(new string[] {
                        "Sky Talk Anytime",
                        "£5.00",
                        "Talk"});
            table1.AddRow(new string[] {
                        "Fibre Unlimited",
                        "£16.40",
                        "Broadband"});
#line 9
 testRunner.Then("the package breakdown should contain", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Bill Breakdown")]
        [Xunit.TraitAttribute("Description", "Store breakdown")]
        public virtual void StoreBreakdown()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Store breakdown", ((string[])(null)));
#line 16
this.ScenarioSetup(scenarioInfo);
#line 17
 testRunner.Given("I have an account \'123\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 18
 testRunner.When("I request my store breakdown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Cost"});
            table2.AddRow(new string[] {
                        "That\'s what she said",
                        "£9.99"});
            table2.AddRow(new string[] {
                        "Broke back mountain",
                        "£9.99"});
            table2.AddRow(new string[] {
                        "50 Shades of Grey",
                        "£4.99"});
#line 19
 testRunner.Then("the store breakdown should contain", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Bill Breakdown")]
        [Xunit.TraitAttribute("Description", "Calls breakdown")]
        public virtual void CallsBreakdown()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calls breakdown", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.Given("I have an account \'123\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 27
 testRunner.When("I request my calls breakdown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Called",
                        "Cost",
                        "Duration"});
            table3.AddRow(new string[] {
                        "07716393769",
                        "£2.13",
                        "00:23:03"});
            table3.AddRow(new string[] {
                        "07716393769",
                        "£2.13",
                        "00:23:03"});
            table3.AddRow(new string[] {
                        "07716393769",
                        "£2.13",
                        "00:23:03"});
            table3.AddRow(new string[] {
                        "07716393769",
                        "£2.13",
                        "00:23:03"});
            table3.AddRow(new string[] {
                        "07716393769",
                        "£2.13",
                        "00:23:03"});
            table3.AddRow(new string[] {
                        "07716393769",
                        "£2.13",
                        "00:23:03"});
            table3.AddRow(new string[] {
                        "07716393769",
                        "£2.13",
                        "00:23:03"});
            table3.AddRow(new string[] {
                        "07716393769",
                        "£2.13",
                        "00:23:03"});
            table3.AddRow(new string[] {
                        "07716393769",
                        "£2.13",
                        "00:23:03"});
            table3.AddRow(new string[] {
                        "07716393769",
                        "£2.13",
                        "00:23:03"});
            table3.AddRow(new string[] {
                        "07716393769",
                        "£2.13",
                        "00:23:03"});
            table3.AddRow(new string[] {
                        "07716393769",
                        "£2.13",
                        "00:23:03"});
            table3.AddRow(new string[] {
                        "07716393769",
                        "£2.13",
                        "00:23:03"});
            table3.AddRow(new string[] {
                        "07716393769",
                        "£2.13",
                        "00:23:03"});
            table3.AddRow(new string[] {
                        "07716393769",
                        "£2.13",
                        "00:23:03"});
            table3.AddRow(new string[] {
                        "07716393769",
                        "£2.13",
                        "00:23:03"});
            table3.AddRow(new string[] {
                        "07716393769",
                        "£2.13",
                        "00:23:03"});
            table3.AddRow(new string[] {
                        "07716393769",
                        "£2.13",
                        "00:23:03"});
            table3.AddRow(new string[] {
                        "02074351359",
                        "£2.13",
                        "00:23:03"});
            table3.AddRow(new string[] {
                        "02074351359",
                        "£2.13",
                        "00:23:03"});
            table3.AddRow(new string[] {
                        "02074351359",
                        "£2.13",
                        "00:23:03"});
            table3.AddRow(new string[] {
                        "02074351359",
                        "£2.13",
                        "00:23:03"});
            table3.AddRow(new string[] {
                        "02074351359",
                        "£2.13",
                        "00:23:03"});
            table3.AddRow(new string[] {
                        "02074351359",
                        "£2.13",
                        "00:23:03"});
            table3.AddRow(new string[] {
                        "02074351359",
                        "£2.13",
                        "00:23:03"});
            table3.AddRow(new string[] {
                        "02074351359",
                        "£2.13",
                        "00:23:03"});
            table3.AddRow(new string[] {
                        "02074351359",
                        "£2.13",
                        "00:23:03"});
#line 28
 testRunner.Then("the calls breakdown should contain", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                BillBreakdownFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                BillBreakdownFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
